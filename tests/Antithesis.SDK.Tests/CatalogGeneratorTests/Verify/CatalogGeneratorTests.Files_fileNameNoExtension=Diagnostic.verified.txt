{
  Diagnostics: [
    {
      Location: /*
        {
            Assert.Always(true, Ids.Ambiguous);
            ^^^^^^^^^^^^^
            Assert.Sometimes(true, Ids.NotAccessible1);
*/
 : (8,12)-(8,25),
      Message: The expression passed as an argument to this Assert "idIsTheMessage" parameter is ambiguous.,
      Severity: Error,
      Descriptor: {
        Id: ANTITHESIS003,
        Title: "idIsTheMessage" is ambiguous.,
        MessageFormat: The expression passed as an argument to this Assert "idIsTheMessage" parameter is ambiguous.,
        Category: Antithesis.Catalog,
        DefaultSeverity: Error,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
            Assert.Always(true, Ids.Ambiguous);
            Assert.Sometimes(true, Ids.NotAccessible1);
            ^^^^^^^^^^^^^^^^
            Assert.Reachable(Ids.NotAccessible2);
*/
 : (9,12)-(9,28),
      Message: The expression passed as an argument to any Assert "idIsTheMessage" parameter must accessible to public or internal.,
      Severity: Error,
      Descriptor: {
        Id: ANTITHESIS004,
        Title: "idIsTheMessage" must be accessible.,
        MessageFormat: The expression passed as an argument to any Assert "idIsTheMessage" parameter must accessible to public or internal.,
        Category: Antithesis.Catalog,
        DefaultSeverity: Error,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
            Assert.Sometimes(true, Ids.NotAccessible1);
            Assert.Reachable(Ids.NotAccessible2);
            ^^^^^^^^^^^^^^^^
            Assert.Unreachable(Ids.NotField);
*/
 : (10,12)-(10,28),
      Message: The expression passed as an argument to any Assert "idIsTheMessage" parameter must accessible to public or internal.,
      Severity: Error,
      Descriptor: {
        Id: ANTITHESIS004,
        Title: "idIsTheMessage" must be accessible.,
        MessageFormat: The expression passed as an argument to any Assert "idIsTheMessage" parameter must accessible to public or internal.,
        Category: Antithesis.Catalog,
        DefaultSeverity: Error,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
            Assert.Reachable(Ids.NotAccessible2);
            Assert.Unreachable(Ids.NotField);
            ^^^^^^^^^^^^^^^^^^
            Antithesis.SDK.Assert.Always(true, Ids.NotConst);
*/
 : (11,12)-(11,30),
      Message: The expression passed as an argument to any Assert "idIsTheMessage" parameter must be a non-null literal or a reference to a const field.,
      Severity: Error,
      Descriptor: {
        Id: ANTITHESIS005,
        Title: "idIsTheMessage" must be a non-null literal or a const field.,
        MessageFormat: The expression passed as an argument to any Assert "idIsTheMessage" parameter must be a non-null literal or a reference to a const field.,
        Category: Antithesis.Catalog,
        DefaultSeverity: Error,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
            Assert.Unreachable(Ids.NotField);
            Antithesis.SDK.Assert.Always(true, Ids.NotConst);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*/
 : (12,12)-(12,40),
      Message: The expression passed as an argument to any Assert "idIsTheMessage" parameter must be a non-null literal or a reference to a const field.,
      Severity: Error,
      Descriptor: {
        Id: ANTITHESIS005,
        Title: "idIsTheMessage" must be a non-null literal or a const field.,
        MessageFormat: The expression passed as an argument to any Assert "idIsTheMessage" parameter must be a non-null literal or a reference to a const field.,
        Category: Antithesis.Catalog,
        DefaultSeverity: Error,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
            string id = string.Empty;
            Assert.AlwaysGreaterThan(2, 1, id);
            ^^^^^^^^^^^^^^^^^^^^^^^^

*/
 : (15,12)-(15,36),
      Message: The expression passed as an argument to any Assert "idIsTheMessage" parameter must be a non-null literal or a reference to a const field.,
      Severity: Error,
      Descriptor: {
        Id: ANTITHESIS005,
        Title: "idIsTheMessage" must be a non-null literal or a const field.,
        MessageFormat: The expression passed as an argument to any Assert "idIsTheMessage" parameter must be a non-null literal or a reference to a const field.,
        Category: Antithesis.Catalog,
        DefaultSeverity: Error,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*

            Assert.AlwaysLessThan(1, 2, _id);
            ^^^^^^^^^^^^^^^^^^^^^
            Assert.SometimesGreaterThan(2, 1, _idReadonly);
*/
 : (17,12)-(17,33),
      Message: The expression passed as an argument to any Assert "idIsTheMessage" parameter must accessible to public or internal.,
      Severity: Error,
      Descriptor: {
        Id: ANTITHESIS004,
        Title: "idIsTheMessage" must be accessible.,
        MessageFormat: The expression passed as an argument to any Assert "idIsTheMessage" parameter must accessible to public or internal.,
        Category: Antithesis.Catalog,
        DefaultSeverity: Error,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
            Assert.AlwaysLessThan(1, 2, _id);
            Assert.SometimesGreaterThan(2, 1, _idReadonly);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
            Assert.SometimesLessThan(1, 2, _idStaticReadonly);
*/
 : (18,12)-(18,39),
      Message: The expression passed as an argument to any Assert "idIsTheMessage" parameter must accessible to public or internal.,
      Severity: Error,
      Descriptor: {
        Id: ANTITHESIS004,
        Title: "idIsTheMessage" must be accessible.,
        MessageFormat: The expression passed as an argument to any Assert "idIsTheMessage" parameter must accessible to public or internal.,
        Category: Antithesis.Catalog,
        DefaultSeverity: Error,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
            Assert.SometimesGreaterThan(2, 1, _idReadonly);
            Assert.SometimesLessThan(1, 2, _idStaticReadonly);
            ^^^^^^^^^^^^^^^^^^^^^^^^
            Assert.Always(true, _idConst);
*/
 : (19,12)-(19,36),
      Message: The expression passed as an argument to any Assert "idIsTheMessage" parameter must accessible to public or internal.,
      Severity: Error,
      Descriptor: {
        Id: ANTITHESIS004,
        Title: "idIsTheMessage" must be accessible.,
        MessageFormat: The expression passed as an argument to any Assert "idIsTheMessage" parameter must accessible to public or internal.,
        Category: Antithesis.Catalog,
        DefaultSeverity: Error,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
            Assert.SometimesLessThan(1, 2, _idStaticReadonly);
            Assert.Always(true, _idConst);
            ^^^^^^^^^^^^^

*/
 : (20,12)-(20,25),
      Message: The expression passed as an argument to any Assert "idIsTheMessage" parameter must accessible to public or internal.,
      Severity: Error,
      Descriptor: {
        Id: ANTITHESIS004,
        Title: "idIsTheMessage" must be accessible.,
        MessageFormat: The expression passed as an argument to any Assert "idIsTheMessage" parameter must accessible to public or internal.,
        Category: Antithesis.Catalog,
        DefaultSeverity: Error,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*

            Assert.Sometimes(true, Id);
            ^^^^^^^^^^^^^^^^
            Assert.Reachable(IdReadonly);
*/
 : (22,12)-(22,28),
      Message: The expression passed as an argument to any Assert "idIsTheMessage" parameter must be a non-null literal or a reference to a const field.,
      Severity: Error,
      Descriptor: {
        Id: ANTITHESIS005,
        Title: "idIsTheMessage" must be a non-null literal or a const field.,
        MessageFormat: The expression passed as an argument to any Assert "idIsTheMessage" parameter must be a non-null literal or a reference to a const field.,
        Category: Antithesis.Catalog,
        DefaultSeverity: Error,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
            Assert.Sometimes(true, Id);
            Assert.Reachable(IdReadonly);
            ^^^^^^^^^^^^^^^^
            Assert.Unreachable(IdStaticReadonly);
*/
 : (23,12)-(23,28),
      Message: The expression passed as an argument to any Assert "idIsTheMessage" parameter must be a non-null literal or a reference to a const field.,
      Severity: Error,
      Descriptor: {
        Id: ANTITHESIS005,
        Title: "idIsTheMessage" must be a non-null literal or a const field.,
        MessageFormat: The expression passed as an argument to any Assert "idIsTheMessage" parameter must be a non-null literal or a reference to a const field.,
        Category: Antithesis.Catalog,
        DefaultSeverity: Error,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
            Assert.Reachable(IdReadonly);
            Assert.Unreachable(IdStaticReadonly);
            ^^^^^^^^^^^^^^^^^^

*/
 : (24,12)-(24,30),
      Message: The expression passed as an argument to any Assert "idIsTheMessage" parameter must be a non-null literal or a reference to a const field.,
      Severity: Error,
      Descriptor: {
        Id: ANTITHESIS005,
        Title: "idIsTheMessage" must be a non-null literal or a const field.,
        MessageFormat: The expression passed as an argument to any Assert "idIsTheMessage" parameter must be a non-null literal or a reference to a const field.,
        Category: Antithesis.Catalog,
        DefaultSeverity: Error,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*

            Assert.Always(true, null);
            ^^^^^^^^^^^^^
            Assert.Always(true, default);
*/
 : (26,12)-(26,25),
      Message: The expression passed as an argument to any Assert "idIsTheMessage" parameter must be a non-null literal or a reference to a const field.,
      Severity: Error,
      Descriptor: {
        Id: ANTITHESIS005,
        Title: "idIsTheMessage" must be a non-null literal or a const field.,
        MessageFormat: The expression passed as an argument to any Assert "idIsTheMessage" parameter must be a non-null literal or a reference to a const field.,
        Category: Antithesis.Catalog,
        DefaultSeverity: Error,
        IsEnabledByDefault: true
      }
    },
    {
      Location: /*
            Assert.Always(true, null);
            Assert.Always(true, default);
            ^^^^^^^^^^^^^
        }
*/
 : (27,12)-(27,25),
      Message: The expression passed as an argument to any Assert "idIsTheMessage" parameter must be a non-null literal or a reference to a const field.,
      Severity: Error,
      Descriptor: {
        Id: ANTITHESIS005,
        Title: "idIsTheMessage" must be a non-null literal or a const field.,
        MessageFormat: The expression passed as an argument to any Assert "idIsTheMessage" parameter must be a non-null literal or a reference to a const field.,
        Category: Antithesis.Catalog,
        DefaultSeverity: Error,
        IsEnabledByDefault: true
      }
    }
  ]
}